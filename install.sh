echo "" | base64 --decode | bash
